@startuml {RBDClassDiagram.png}
title Raiti's Binary Data
namespace RBD {

	interface IRBD {
		..Property..
		+Factories() : Dictionary<int, IDataObjectFactry>
		+Data() : IDataObject
		+Data(data : IDataObject)

		--Method--
		+addFactory(factory : IDataObjectFactry)
		+removeFactory(factory : IDataObjectFactry)
		+removeFactory(dataType : int) : IDataObjectFactry
	}

	
	namespace DataObject{

		interface IDataObject {
			..Property..
			+Name() : string
			+Name(name : string)
			+DataType() : int
			+IsGroup() : bool
			+Parent() : IGroupData
			+ByteSize() : int

			..DataProperty..
			+ByteData() : byte
			+ByteData(data : byte)
			+ShortData() : short
			+ShortData(data : short)
			+IntData() : int
			+IntData(data : int) 
			+LongData() : long
			+LongData(data : long)
			+FloatData() : float
			+FloatData(data : float)
			+DoubleData() : double
			+DoubleData(data : double)
			+BoolData() : bool
			+BoolData(data : bool)
			+CharData() : char
			+CharData(data : char)
			+StringData() : string
			+StringData(data : string)
			+SByteData() : sbyte
			+SByteData(data : sbyte)
			+UShortData() : ushort
			+UShortData(data : ushort)
			+UIntData() : uint
			+UIntData(data : uint)
			+ULongData() : ulong
			+ULongData(data : ulong)
			+DecimalData() : decimal
			+DecimalData(data : decimal)
			+ByteArrayData() : byte[]
			+ByteArrayData(data : byte[])
			+ObjectData() : object
			+ObjectData(data : object)
			+GetData<T>():T
			+SetData<T>(data : T):T;
		}

		abstract DataObjectBase {
			..Field..
			#_Name : string
			#_Parent : IGroupData
		}

		class ByteDataObject {
			..Field..
			#_Data : byte
		}

		class ShortDataObject {
			..Field..
			#_Data : short
		}

		class IntDataObject {
			..Field..
			#_Data : int
		}

		class LongDataObject {
			..Field..
			#_Data : long
		}

		class FloatDataObject {
			..Field..
			#_Data : float
		}

		class DoubleDataObject {
			..Field..
			#_Data : double
		}

		class BoolDataObject {
			..Field..
			#_Data : bool
		}

		class CharDataObject {
			..Field..
			#_Data:char
		}

		class StringDataObject {
			..Field..
			#_Data:string
		}

		class SByteDataObject {
			..Field..
			#_Data:sbyte
		}

		class UShortDataObject {
			..Field..
			#_Data:ushort
		}

		class UIntDataObject {
			..Field..
			#_Data:uint
		}

		class ULongDataObject {
			..Field..
			#_Data:ulong
		}

		class DecimalDataObject {
			..Field..
			#_Data:decimal
		}

		class ByteArrayDataObject {
			..Field..
			#_Data:byte[]
		}

		class ObjectDataObject {
			..Field..
			#_Data:object
		}
		

		IDataObject <|.down. DataObjectBase
		DataObjectBase <|-- ByteDataObject
		DataObjectBase <|-- ShortDataObject
		DataObjectBase <|-- IntDataObject
		DataObjectBase <|-- LongDataObject
		DataObjectBase <|-- FloatDataObject
		DataObjectBase <|-- DoubleDataObject
		DataObjectBase <|-- BoolDataObject
		DataObjectBase <|-- CharDataObject
		DataObjectBase <|-- StringDataObject
		DataObjectBase <|-- SByteDataObject
		DataObjectBase <|-- UShortDataObject
		DataObjectBase <|-- UIntDataObject
		DataObjectBase <|-- ULongDataObject
		DataObjectBase <|-- DecimalDataObject
		DataObjectBase <|-- ByteArrayDataObject
		DataObjectBase <|-- ObjectDataObject
		

		class DataType <<(S,#FF7700)static>> {
			+{static}<<final>>Group : int = 0
			+{static}<<final>>Byte : int = 1
			+{static}<<final>>Short : int = 2
			+{static}<<final>> Int16: int = 2
			+{static}<<final>>Int : int = 3
			+{static}<<final>>Int32 : int = 3
			+{static}<<final>>Long : int = 4
			+{static}<<final>>Int64 : int = 4
			+{static}<<final>>Float : int = 5
			+{static}<<final>>Single : int = 5
			+{static}<<final>>Double : int = 6
			+{static}<<final>>Bool : int = 7
			+{static}<<final>>Boolean : int = 7
			+{static}<<final>>Char : int = 8
			+{static}<<final>>String : int = 9
			+{static}<<final>>SByte : int = 10
			+{static}<<final>>UShort : int = 11
			+{static}<<final>>UInt16 : int = 11
			+{static}<<final>>UInt : int = 12
			+{static}<<final>>UInt32 : int = 12
			+{static}<<final>>ULong : int = 13
			+{static}<<final>>UInt64 : int = 13
			+{static}<<final>>Decimal : int = 14
			+{static}<<final>>ByteArray : int = 15
		}

		IDataObject -[hidden]right- DataType
	}

	namespace DataObjectFactory  {
		interface IDataObjectFactry<T : IDataObject> {
			+ToObject(data : byte[]) : T
			+ToByte(T) : byte[]
		}
		IDataObjectFactry .right.> RBD.DataObject.IDataObject
	}

	namespace Exception {
		class WrongDataTypeException {
			..Property..
			+DataType() : int
			+WrongDataType() : int
			--Method--
			+WrongDataTypeException(dataType : int, wrongDataType : int)
			+WrongDataTypeException(dataType : int, wrongDataType : int, message : string)
			+WrongDataTypeException(dataType : int, wrongDataType : int, message : string, innerException)
		}
	}
}
@enduml